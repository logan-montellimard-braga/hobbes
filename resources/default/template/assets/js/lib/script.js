// Generated by CoffeeScript 1.6.3
(function() {
  var addEventsToHeadings, cleanLocalStorage, constructLocalStorageString, getAllHeadingsIn, getLocalStorageUpdateDate, getNextOrPrevHeading, getNightLocalState, getNightState, getRealOffsetTop, getScrollTop, getStyleFromString, goToNextOrPrevHeading, goToTopOf, goToTopOfPageOrElem, hideArrows, hideControlButtons, hideIfNoOtherTitle, initNightMode, interceptDirButtons, interceptSmoothLinks, makeShortcuts, nightTime, setCorrectCodeTheme, setNightButton, setNightLocalState, setNightMode, setNightState, setScrollTop, showOrHideOnScroll, toggleNightLocalState, toggleNightState, updateLocalStorageDate;

  Object.prototype.toArray = function() {
    var arr, i, item, _i, _len;
    arr = [];
    for (i = _i = 0, _len = this.length; _i < _len; i = ++_i) {
      item = this[i];
      arr[i] = this[i];
    }
    return arr;
  };

  getScrollTop = function() {
    return document.body.scrollTop || document.documentElement.scrollTop;
  };

  setScrollTop = function(val) {
    document.body.scrollTop = val;
    return document.documentElement.scrollTop = val;
  };

  getRealOffsetTop = function(elem) {
    var acc, el;
    el = elem;
    acc = 0;
    while (el) {
      acc += el.offsetTop;
      el = el.offsetParent;
    }
    return acc;
  };

  goToTopOf = function(target, name, time) {
    var from, start, timer, to;
    if (name == null) {
      name = "";
    }
    if (time == null) {
      time = 300;
    }
    if (target) {
      start = new Date().getTime();
      from = getScrollTop();
      to = getRealOffsetTop(target);
      timer = setInterval(function() {
        var step;
        step = Math.min(1, (new Date().getTime() - start) / time);
        setScrollTop((from + step * (to - from)) + "");
        if (step === 1) {
          return clearInterval(timer);
        }
      }, 10);
      document.location.hash = name;
      return document.body.style["scrollTop"] = from + "";
    }
  };

  goToTopOfPageOrElem = function(elem) {
    if (elem) {
      if (getScrollTop() >= getRealOffsetTop(elem) - 100) {
        return goToTopOf(document.getElementById("top"));
      } else {
        return goToTopOf(elem);
      }
    }
  };

  getAllHeadingsIn = function(node) {
    if (node) {
      return node.querySelectorAll("h1, h2, h3, h4, h5");
    }
  };

  getNextOrPrevHeading = function(dir, headings) {
    var factor, i, item, pos, _i, _len;
    pos = getScrollTop();
    factor = dir === 'prev' ? -1 : 1;
    headings = dir === 'prev' ? headings.toArray().reverse() : headings;
    for (i = _i = 0, _len = headings.length; _i < _len; i = ++_i) {
      item = headings[i];
      if (factor * getRealOffsetTop(item) > factor * (pos + factor)) {
        return item;
      }
      false;
    }
  };

  goToNextOrPrevHeading = function(dir, headings) {
    var pos;
    pos = getNextOrPrevHeading(dir, headings);
    if (pos) {
      return goToTopOf(pos, pos.getAttribute("id"));
    }
  };

  hideIfNoOtherTitle = function(elem, headings, dir) {
    var title, v;
    if (elem && headings) {
      title = getNextOrPrevHeading(dir, headings);
      v = title ? "visible" : "hidden";
      return elem.style.visibility = v;
    }
  };

  getStyleFromString = function(str) {
    var i, sheet, styleReference, _i, _len, _ref;
    if (str == null) {
      str = "";
    }
    _ref = document.styleSheets;
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      sheet = _ref[i];
      if (sheet.href.indexOf(str) >= 0) {
        styleReference = sheet;
        break;
      }
    }
    return styleReference;
  };

  addEventsToHeadings = function(headings) {
    var clickCallback, i, item, mouseoutCallback, mouseoverCallback, name, _i, _len, _results;
    mouseoverCallback = function() {
      var text;
      text = document.createElement("span");
      text.setAttribute("class", "permalink");
      text.appendChild(document.createTextNode('Lien permanent'));
      this.appendChild(text);
      return setTimeout(function() {
        var elem;
        elem = document.querySelector(".permalink");
        if (elem) {
          return document.querySelector(".permalink").classList.add("appear");
        }
      }, 600);
    };
    mouseoutCallback = function() {
      var el;
      el = document.querySelector(".permalink");
      if (el) {
        return el.parentNode.removeChild(el);
      }
    };
    clickCallback = function() {
      return goToTopOf(this, this.getAttribute("id"));
    };
    _results = [];
    for (i = _i = 0, _len = headings.length; _i < _len; i = ++_i) {
      item = headings[i];
      name = item.textContent.replace(/\s/g, '_').toLowerCase();
      item.setAttribute('id', name);
      item.addEventListener("mouseover", mouseoverCallback);
      item.addEventListener("mouseout", mouseoutCallback);
      _results.push(item.addEventListener("click", clickCallback));
    }
    return _results;
  };

  interceptSmoothLinks = function() {
    var clickCallback, i, link, links, _i, _len, _results;
    links = document.querySelectorAll("a.smooth");
    clickCallback = function(e) {
      var name, target;
      e.preventDefault();
      target = document.querySelector(this.getAttribute("href"));
      name = this.getAttribute("id");
      if (target) {
        return goToTopOf(target, name);
      }
    };
    _results = [];
    for (i = _i = 0, _len = links.length; _i < _len; i = ++_i) {
      link = links[i];
      _results.push(link.addEventListener("click", clickCallback));
    }
    return _results;
  };

  interceptDirButtons = function() {
    var leftBtn, rightBtn;
    leftBtn = document.querySelector(".dirButtons .left");
    rightBtn = document.querySelector(".dirButtons .right");
    if (leftBtn) {
      leftBtn.addEventListener("click", function(e) {
        e.preventDefault();
        return goToNextOrPrevHeading('prev', getAllHeadingsIn(document.getElementById("main_text")));
      });
    }
    if (rightBtn) {
      return rightBtn.addEventListener("click", function(e) {
        e.preventDefault();
        return goToNextOrPrevHeading('next', getAllHeadingsIn(document.getElementById("main_text")));
      });
    }
  };

  showOrHideOnScroll = function(elem, topBound, bottomBound) {
    var scrollCallback;
    if (elem && topBound && bottomBound) {
      scrollCallback = function() {
        var footPos, opa, textPos, thisPos;
        textPos = getRealOffsetTop(topBound);
        footPos = getRealOffsetTop(bottomBound);
        thisPos = getScrollTop();
        opa = thisPos > textPos - 100 && thisPos < footPos - 500 ? 1 : 0;
        return elem.style.opacity = opa;
      };
      scrollCallback();
      return window.addEventListener("scroll", scrollCallback);
    }
  };

  constructLocalStorageString = function(str) {
    return "hobbes_local_setting_" + str;
  };

  cleanLocalStorage = function(attr) {
    var now, tps, update;
    update = new Date(getLocalStorageUpdateDate(attr));
    now = new Date;
    tps = now - update;
    if (tps > 2.8e07) {
      return localStorage.removeItem(constructLocalStorageString(attr));
    }
  };

  getNightState = function() {
    return document.body.classList.contains("night");
  };

  setNightState = function(state) {
    if (getNightState() !== state) {
      return document.body.classList.toggle("night");
    }
  };

  toggleNightState = function() {
    return document.body.classList.toggle("night");
  };

  getNightLocalState = function() {
    return localStorage.getItem(constructLocalStorageString("night")) || false;
  };

  updateLocalStorageDate = function(attr) {
    return localStorage.setItem(constructLocalStorageString(attr + "_date"), new Date);
  };

  getLocalStorageUpdateDate = function(attr) {
    return localStorage.getItem(constructLocalStorageString(attr + "_date"));
  };

  setNightLocalState = function(state) {
    localStorage.setItem(constructLocalStorageString("night"), state);
    return updateLocalStorageDate("night");
  };

  toggleNightLocalState = function() {
    if (getNightLocalState() === "true") {
      setNightLocalState(false);
    } else {
      setNightLocalState(true);
    }
    return updateLocalStorageDate("night");
  };

  nightTime = function() {
    var currentHour;
    currentHour = new Date().getHours();
    return currentHour >= 21 || currentHour <= 8;
  };

  setNightButton = function() {
    var btn;
    btn = document.querySelector(".nightButton");
    if (btn && getNightState()) {
      return btn.classList.add("pushed");
    } else {
      return btn.classList.remove("pushed");
    }
  };

  setCorrectCodeTheme = function() {
    var darkTheme, lightTheme, night;
    if (document.querySelector("code")) {
      darkTheme = getStyleFromString("obsidian.css");
      lightTheme = getStyleFromString("github.css");
      night = getNightState();
      darkTheme.disabled = !night;
      return lightTheme.disabled = night;
    }
  };

  setNightMode = function(e) {
    if (e) {
      e.preventDefault();
    }
    toggleNightLocalState();
    toggleNightState();
    setCorrectCodeTheme();
    return setNightButton();
  };

  initNightMode = function() {
    var btn, returnAfterInit;
    cleanLocalStorage("night");
    if (nightTime() && !getNightLocalState()) {
      setNightState(true);
      returnAfterInit = true;
    }
    if (!returnAfterInit && getNightState().toString() !== getNightLocalState().toString()) {
      toggleNightState();
    }
    setCorrectCodeTheme();
    setNightButton();
    btn = document.querySelector(".nightButton");
    if (btn) {
      return btn.addEventListener("click", setNightMode);
    }
  };

  hideArrows = function() {
    window.addEventListener('scroll', function() {
      return hideIfNoOtherTitle(document.querySelector(".dirButtons .left"), getAllHeadingsIn(document.getElementById("main_text")), "prev");
    });
    return window.addEventListener('scroll', function() {
      return hideIfNoOtherTitle(document.querySelector(".dirButtons .right"), getAllHeadingsIn(document.getElementById("main_text")), "next");
    });
  };

  hideControlButtons = function() {
    showOrHideOnScroll(document.querySelector('.botButton'), document.querySelector("#main_text"), document.querySelector("footer"));
    return showOrHideOnScroll(document.querySelector('.dirButtons'), document.querySelector("#main_text"), document.querySelector("footer"));
  };

  makeShortcuts = function() {
    return document.addEventListener("keyup", function(e) {
      var car;
      e.preventDefault();
      car = String.fromCharCode(e.which).toLowerCase();
      switch (car) {
        case 'n':
          return setNightMode();
        case 'g':
          return goToTopOfPageOrElem(document.getElementById("main_text"));
        case 'l':
        case "'":
          return goToNextOrPrevHeading('next', getAllHeadingsIn(document.getElementById("main_text")));
        case 'h':
        case '%':
          return goToNextOrPrevHeading('prev', getAllHeadingsIn(document.getElementById("main_text")));
      }
    });
  };

  document.addEventListener('DOMContentLoaded', function() {
    initNightMode();
    interceptSmoothLinks();
    interceptDirButtons();
    if (document.querySelector("code")) {
      hljs.initHighlightingOnLoad();
    }
    addEventsToHeadings(getAllHeadingsIn(document.getElementById("main_text")));
    hideControlButtons();
    hideArrows();
    makeShortcuts();
    setInterval(initNightMode, 30000);
    return window.addEventListener('storage', function(e) {
      return initNightMode();
    });
  });

}).call(this);
